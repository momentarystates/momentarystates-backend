

###
# summary: Create a new public state
# description: |
#   Creates a new public state. Please see the specified request payload. The `token` and the
#   `speculationId` will be provided via email after an `Admin` has created a new speculation. Please
#   see `POST /api/admin/speculation` for more information.
#
#   Except the name, all other params are optional and will be set to default values if not specified
#   in the request. Durations in general need to be defined in seconds!
# operationId: admin-create-speculation
# parameters:
#   - name: body
#     in: body
#     required: true
#     schema:
#       type: object
#       $ref: '#/definitions/controllers.api.game.GameProtocol.CreatePublicState'
# responses:
#   200:
#     description: Successful response with a public state entity.
#     schema:
#       type: object
#       $ref: '#/definitions/persistence.model.PublicStateEntity'
#   400:
#     description: |
#       In case something went wrong check the error code.
#     schema:
#       $ref: '#/definitions/commons.AppError'
###
POST /public-state controllers.api.game.PublicStateController.create()



###
# summary: Update a public state
# description: |
#   Updates a public state. This endpoint can only be called by the goddess of the public state.
#   It is possible to update parameter of the public state and the market url.
# operationId: goddess-update-public-state
# parameters:
#   - name: id
#     in: path
#     required: true
#     type: java.util.UUID
#   - name: body
#     in: body
#     required: true
#     schema:
#       type: object
#       $ref: '#/definitions/controllers.api.game.GameProtocol.UpdatePublicState'
# responses:
#   200:
#     description: Successful response with a public state entity.
#     schema:
#       type: object
#       $ref: '#/definitions/persistence.model.PublicStateEntity'
#   400:
#     description: |
#       In case something went wrong check the error code.
#     schema:
#       $ref: '#/definitions/commons.AppError'
###
PUT /public-state/:id controllers.api.game.PublicStateController.update(id: java.util.UUID)



###
# summary: Start the game for a public state
# description: |
#   Start a speculation respectively a public state. This means, from this moment on the public state
#   is constantly processed by the backend in defined periods of time.
#
#   This api endpoint can only be called by the goddess that is associated with the public state specified via
#   path parameter `id`. Otherwise, an error is returned.
# operationId: game-public-state-start
# parameters:
#   - name: id
#     in: path
#     description: the id of the public state
#     required: true
#     type: java.util.UUID
# responses:
#   200:
#     description: Successful response with the updated public state entity.
#     schema:
#       type: object
#       $ref: '#/definitions/persistence.model.PublicStateEntity'
#   400:
#     description: |
#       In case something went wrong check the error code.
#     schema:
#       $ref: '#/definitions/commons.AppError'
###
PUT /public-state/:id/start controllers.api.game.PublicStateController.start(id: java.util.UUID)


###
# summary: Stop the game of a public state
# description: |
#   This will stop processing the public state. This endpoint should be called, if the goddess will explicitly
#   finish a speculation. It does not need to be called to end a game after the `speculationDuration` has expired.
#   This will be done automatically during processing of a public state.
#
#   This api endpoint can only be called by the goddess that is associated with the public state specified via
#   path parameter `id`. Otherwise, an error is returned.
# operationId: game-public-state-start
# parameters:
#   - name: id
#     in: path
#     description: the id of the public state
#     required: true
#     type: java.util.UUID
# responses:
#   200:
#     description: Successful response with the updated public state entity.
#     schema:
#       type: object
#       $ref: '#/definitions/persistence.model.PublicStateEntity'
#   400:
#     description: |
#       In case something went wrong check the error code.
#     schema:
#       $ref: '#/definitions/commons.AppError'
###
PUT /public-state/:id/stop controllers.api.game.PublicStateController.stop(id: java.util.UUID)


###
# summary: Create an invite to found a new private state
# description: |
#   Create an invite for a user to found a new private state. Specify an email and optionally a token. If the
#   is not explicitly defined in this request, it will be generated by the backend. The token must be an
#   alphanumeric string and should not be longer than 16 characters. 5 to 8 characters is recommended.
#
#   The backend will send an email with the token to the specified email. That enables to receiving person to create
#   a new private state.
# operationId: invite-create-private-state
# parameters:
#   - name: id
#     in: path
#     description: public state id
#     required: true
#     type: java.util.UUID
#   - name: body
#     in: body
#     required: true
#     schema:
#       type: object
#       $ref: '#/definitions/controllers.api.game.GameProtocol.PrivateStateInvite'
# responses:
#   200:
#     description: Successful response with an empty result.
#   400:
#     description: |
#       In case something went wrong check the error code.
#     schema:
#       $ref: '#/definitions/commons.AppError'
###
POST /public-state/:id/invite controllers.api.game.PublicStateController.invite(id: java.util.UUID)


###
# summary: Search invites for creating a private state
# description: |
#   This endpoint returns all invites that have been created to create a new private state. Filter the result by
#   specifying an email or a part of an email.
# operationId: get-create-private-state-invites
# parameters:
#   - name: id
#     in: path
#     description: public state id
#     required: true
#     type: java.util.UUID
#   - name: email
#     in: query
#     required: false
#     type: string
# responses:
#   200:
#     description: Successful response with a list of invites.
#     schema:
#       $ref: '#/definitions/persistence.model.CreatePrivateStateInviteEntity'
#   400:
#     description: |
#       In case something went wrong check the error code.
#     schema:
#       $ref: '#/definitions/commons.AppError'
###
GET /public-state/:id/invite/search controllers.api.game.PublicStateController.invites(id: java.util.UUID)


###
# summary: Create a new private state
# description: |
#   Creates a new private state. The requesting user automatically becomes a citizen of that private state. If the
#   minimum number of citizen per private state, which is defined on public state level, is reached, the status of
#   the private state will be `Founded`, otherwise it will be `Founding` which means, it is not yet "officially"
#   operational at this point.
#
#   Characteristics is a list of strings and one of each of the following pairs. In a later version, these values
#   will be definable via the goddess at the time a public state is created. For now, only the following pairs
#   are available:
#
#   - `Innovative` vs `Traditional`
#   - `Tolerant & open` vs `Cautious and Secretive`
#   - `Chaotic` vs `Structured`
#   - `Concurrence` vs `Collaboration`
#   - `Spontaneous` vs `Planning`
#
#   At the moment the backend does not perform any validation of the values defined as `characteristics`.
# operationId: create-private-state
# parameters:
#   - name: body
#     in: body
#     required: true
#     schema:
#       type: object
#       $ref: '#/definitions/controllers.api.game.GameProtocol.CreatePrivateState'
# responses:
#   200:
#     description: Successful response with the private state entity and the citizen entity.
#     schema:
#       $ref: '#/definitions/controllers.api.game.GameProtocol.Citizenship'
#   400:
#     description: |
#       In case something went wrong check the error code.
#     schema:
#       $ref: '#/definitions/commons.AppError'
###
POST /private-state controllers.api.game.PrivateStateController.create()


###
# summary: Create an invite for a citizenship for a private state
# description: |
#   Creates a new invite to become a citizen of the private state. The requesting user needs to be a citizen of the
#   specified private state and depending on the social order of the private state it might be necessary that the
#   requesting user is also the master of the private state. This accounts if the social order is either `SinglePerson`
#   or `SinglePersonRotation`. In case `Consensus` or `SimpleMajority` any citizen of the private state can create
#   invites for other users to become citizen of the same private state.
#
#   If this endpoint is successful, an email is with a token is send to the email specified in the request. This token
#   needs to used to join the private state (using another endpoint).
#
#   As with most other endpoints which have tokens in their request, again, this is optional and if not specified
#   in the request, it will be generated by the backend. The token should be an alphanumeric string with at most
#   16 characters, where 5 to 8 are recommended.
# operationId: invite-join-private-state
# parameters:
#   - name: id
#     in: path
#     description: private state id
#     required: true
#   - name: body
#     in: body
#     required: true
#     schema:
#       type: object
#       $ref: '#/definitions/controllers.api.game.GameProtocol.PrivateStateInvite'
# responses:
#   200:
#     description: Successful response with an empty result
#   400:
#     description: |
#       In case something went wrong check the error code.
#     schema:
#       $ref: '#/definitions/commons.AppError'
###
POST /private-state/:id/invite controllers.api.game.PrivateStateController.invite(id: java.util.UUID)


###
# summary: Join a private state
# description: |
#   Join a private state and become a citizen of the private state. The requesting user can be already an active
#   citizen in this or any other private state of the public state. If this happens, an error is returned.
#
#   In case of a successful request, the response contains the updated private state and the citizen entity. Since
#   the status of the private can change during this process, it is part of the response.
# operationId: join-private-state
# parameters:
#   - name: id
#     in: path
#     description: private state id
#     required: true
#     type: java.util.UUID
#   - name: body
#     in: body
#     required: true
#     schema:
#       type: object
#       $ref: '#/definitions/controllers.api.game.GameProtocol.JoinPrivateState'
# responses:
#   200:
#     description: Successful response with the private state entity and the citizen entity.
#     schema:
#       $ref: '#/definitions/controllers.api.game.GameProtocol.Citizenship'
#   400:
#     description: |
#       In case something went wrong check the error code.
#     schema:
#       $ref: '#/definitions/commons.AppError'
###
POST /private-state/:id/join controllers.api.game.PrivateStateController.join(id: java.util.UUID)
